name: "Technical Assessment - ABB"

trigger:
  branches:
    include:
      - main

pool:
  name: linux-pool
  demands: Agent.Name -equals nithish

variables:
  imageName: 'my-app'

steps:
  # Ensure Node.js 18.xx is installed and in PATH
  # - task: UseNode@1
  #   displayName: 'Use Node.js 18.x'
  #   inputs:
  #     versionSpec: '18.x'
  #     checkLatest: true

  # Show versions for verification
  - script: |
      node -v
      npm -v
    displayName: 'Check Node & npm versions'

  # Install dependencies (sync lock file if needed)
  - script: |
      npm install
      npm ci
    displayName: 'Install dependencies'

  # Run unit tests (JUnit report will be generated by jest-junit config in package.json)
  - script: npm test
    displayName: 'Run unit tests'
    env:
      CI: true

  # Publish test results to Tests tab
  - task: PublishTestResults@2
    displayName: 'Publish test results (JUnit)'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test-results/junit.xml'
      testRunTitle: 'Node.js Unit Tests'
      failTaskOnFailedTests: true

# ------------------------
# Docker image build & push
# ------------------------

#ACR Login 
  - script: |
      whoami
      # pwd
      az acr login --name nithishacrm3wx2

  - task: Docker@2
    displayName: 'Build Docker image'
    inputs:
      command: buildAndPush
      repository: $(imageName)
      dockerfile: Dockerfile
      containerRegistry: 'nithish-acr'
      tags: |
        v1

  # Package artifact
  - script: |
      pwd
      mkdir -p artifact
      tar -czf artifact/app.tar.gz app.js server.js package.json package-lock.json
      cp -r manifests/*.yaml artifact/ || echo "No manifests found"
      sudo chmod 777 artifact/*
      ls -R artifact
    displayName: 'Create artifact (tar.gz + manifests)'

  # Publish artifact to DevOps
  - task: PublishBuildArtifacts@1
    displayName: 'Publish build artifact'
    inputs:
      PathtoPublish: 'artifact'
      ArtifactName: 'drop'
      publishLocation: 'Container'
  # - publish: artifact
  #   artifact: drop

  # Clean up workspace to save agent disk space
  - script: |
      echo "Cleaning workspace..."
      rm -rf artifact test-results node_modules
    displayName: 'Clean up workspace'